        -:    0:Source:web.c
        -:    0:Programs:4
        -:    1:#include "web.h"
        -:    2:
        -:    3:#include <openssl/ssl.h>
        -:    4:#include <openssl/err.h>
        -:    5:
        -:    6:const char *web_file_path = "./htdocs";
        -:    7:extern zlog_category_t *c;
        -:    8:
        -:    9:#ifdef HTTPS
        -:   10:extern SSL_CTX *g_ctx;
        -:   11:SSL *ssl = NULL;
        -:   12:#endif
        -:   13:/*
        -:   14: * 获取客户端请求包的内容，打印在日志中
        -:   15: */
function read_requesthdrs called 0 returned 0% blocks executed 0%
    #####:   16:static void read_requesthdrs(rio_t *rp)
    $$$$$:   16-block  0
        -:   17:{
    #####:   18:	assert(rp);
    $$$$$:   18-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   18-block  1
call    2 never executed
    #####:   19:	char buf[MAXLINE] = { 0 };
    #####:   20:	Rio_readlineb(rp, buf, MAXLINE);
    $$$$$:   20-block  0
call    0 never executed
        -:   21:	//! Host: localhost:8080 
        -:   22:	//zlog_info(c, buf);
    #####:   23:	while (strcmp(buf ,"\r\n"))     
    $$$$$:   23-block  0
branch  0 never executed
branch  1 never executed
        -:   24:	{
    #####:   25:		memset(buf, 0, MAXLINE);
    #####:   26:		Rio_readlineb(rp, buf, MAXLINE);
    $$$$$:   26-block  0
call    0 never executed
        -:   27:		//zlog_info(c, buf);
        -:   28:	}
    #####:   29:} 
        -:   30:
        -:   31:/*
        -:   32: * POST方法需要获取post数据的长度
        -:   33: */
function post_requesthdrs called 0 returned 0% blocks executed 0%
    #####:   34:static void post_requesthdrs(rio_t *rp, int *content_length)
    $$$$$:   34-block  0
        -:   35:{
    #####:   36:	assert(rp && content_length);
    $$$$$:   36-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   36-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   36-block  2
call    4 never executed
    #####:   37:	char buf[MAXLINE] = { 0 };
    #####:   38:	char *p = NULL;
        -:   39:
    #####:   40:	Rio_readlineb(rp, buf, MAXLINE);
    $$$$$:   40-block  0
call    0 never executed
    #####:   41:	while (strcmp(buf, "\r\n"))
    $$$$$:   41-block  0
branch  0 never executed
branch  1 never executed
        -:   42:	{
    #####:   43:		Rio_readlineb(rp, buf, MAXLINE);
    $$$$$:   43-block  0
call    0 never executed
    #####:   44:		if (strncasecmp(buf, "Content-Length:", 15) == 0)
branch  0 never executed
branch  1 never executed
        -:   45:		{
    #####:   46:			p = &buf[15];
    #####:   47:			p += strspn(p, " \t");
    #####:   48:			*content_length = atol(p);
    $$$$$:   48-block  0
        -:   49:		}
        -:   50:	}
    #####:   51:}
        -:   52:
        -:   53:/*
        -:   54: * 获取https包中Content-Length字段的值和从客户端传过来的参数
        -:   55: * http包中只有Content-Length字段的值，客户端传过来的参数需要下一次read才能读到
        -:   56: * https包本身是加密的，所以可以将参数同包一起传递
        -:   57: */
function post_https_requesthdrs called 0 returned 0% blocks executed 0%
    #####:   58:static void post_https_requesthdrs(char *buf, int *content_length, char *cgiargs)
    $$$$$:   58-block  0
        -:   59:{
    #####:   60:	assert(buf && content_length);
    $$$$$:   60-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   60-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   60-block  2
call    4 never executed
    #####:   61:	char *p = NULL;
    #####:   62:    char line[64] = { 0 };
    #####:   63:    char *end = NULL;
    #####:   64:	char *ptr = buf;
    #####:   65:	while (strcmp(ptr, "\r\n"))
    $$$$$:   65-block  0
    $$$$$:   65-block  1
branch  0 never executed
branch  1 never executed
        -:   66:	{
    #####:   67:		if ((end = strstr(ptr, "\n")) != NULL)
    $$$$$:   67-block  0
branch  0 never executed
branch  1 never executed
        -:   68:		{
    #####:   69:			if (strncasecmp(ptr,"Content-Length:",15) == 0)
    $$$$$:   69-block  0
branch  0 never executed
branch  1 never executed
        -:   70:			{
    #####:   71:				strncpy(line, ptr, end - ptr);
    #####:   72:				p = &line[15];
    #####:   73:				p += strspn(p, " \t");
    #####:   74:				*content_length = atol(p);
    #####:   75:				if (*content_length > 0)
    $$$$$:   75-block  0
branch  0 never executed
branch  1 never executed
        -:   76:				{
    #####:   77:					break;
    $$$$$:   77-block  0
        -:   78:				}
        -:   79:			}
    #####:   80:			ptr = end + 1;
    $$$$$:   80-block  0
        -:   81:		}
        -:   82:	}
    #####:   83:	if ((end = strstr(buf, "\r\n\r\n")) != NULL)
    $$$$$:   83-block  0
branch  0 never executed
branch  1 never executed
        -:   84:	{
    #####:   85:		end = end + strlen("\r\n\r\n");
    #####:   86:		strncpy(cgiargs, end, *content_length);
    $$$$$:   86-block  0
        -:   87:	}
    #####:   88:}
        -:   89:
function parse_uri called 0 returned 0% blocks executed 0%
    #####:   90:static int parse_uri(char *uri, char *filename, char *cgiargs)
    $$$$$:   90-block  0
        -:   91:{
    #####:   92:	assert(uri && filename && cgiargs);
    $$$$$:   92-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   92-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   92-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:   92-block  3
call    6 never executed
        -:   93:
    #####:   94:	char *ptr = NULL;
        -:   95:	//! static
    #####:   96:	if (!strstr(uri, "cgi-bin"))
    $$$$$:   96-block  0
branch  0 never executed
branch  1 never executed
        -:   97:	{
    #####:   98:		strncpy(cgiargs, "", 1);
        -:   99:		//转换为相对路径
    #####:  100:		strncpy(filename, web_file_path, strlen(web_file_path));
    #####:  101:		strcat(filename, uri);
        -:  102:		//若请求为目录，则默认文件是./htdocs/home.html
    #####:  103:		if (uri[strlen(uri) - 1] == '/')
    $$$$$:  103-block  0
branch  0 never executed
branch  1 never executed
        -:  104:		{
    #####:  105:			strcat(filename, "home.html");
    $$$$$:  105-block  0
        -:  106:		}
    #####:  107:		return 1;
    $$$$$:  107-block  0
        -:  108:	}
        -:  109:	//! dynamic
        -:  110:	else 
        -:  111:	{
    #####:  112:		ptr = index(uri, '?');
    #####:  113:		if (ptr)
    $$$$$:  113-block  0
branch  0 never executed
branch  1 never executed
        -:  114:		{
    #####:  115:			strncpy(cgiargs, ptr + 1, strlen(ptr+1));
    #####:  116:			*ptr = '\0';
    $$$$$:  116-block  0
        -:  117:		}
        -:  118:		else 
        -:  119:		{
    #####:  120:			strncpy(cgiargs, "", 1);
    $$$$$:  120-block  0
        -:  121:		}
        -:  122:		//转相对路径
    #####:  123:		strncpy(filename, web_file_path, strlen(web_file_path));
    #####:  124:		strcat(filename, uri);
        -:  125:		
    #####:  126:		return 0;
    $$$$$:  126-block  0
        -:  127:	}
        -:  128:}
        -:  129:
function get_filetype called 0 returned 0% blocks executed 0%
    #####:  130:static void get_filetype(char *filename, char *filetype)
    $$$$$:  130-block  0
        -:  131:{
    #####:  132:	assert(filename && filetype);
    $$$$$:  132-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  132-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  132-block  2
call    4 never executed
        -:  133:
    #####:  134:	if (strstr(filename, ".html"))
    $$$$$:  134-block  0
branch  0 never executed
branch  1 never executed
        -:  135:	{
    #####:  136:		strncpy(filetype, TYPE_HTML, strlen(TYPE_HTML));
    $$$$$:  136-block  0
        -:  137:	}
    #####:  138:	else if (strstr(filename, ".gif"))
    $$$$$:  138-block  0
branch  0 never executed
branch  1 never executed
        -:  139:	{
    #####:  140:		strncpy(filetype, TYPE_GIF, strlen(TYPE_GIF));
    $$$$$:  140-block  0
        -:  141:	}
    #####:  142:	else if (strstr(filetype, ".jpg"))
    $$$$$:  142-block  0
branch  0 never executed
branch  1 never executed
        -:  143:	{
    #####:  144:		strncpy(filetype, TYPE_JPG, strlen(TYPE_JPG));
    $$$$$:  144-block  0
        -:  145:	}
        -:  146:	else 
        -:  147:	{
    #####:  148:		strncpy(filetype, TYPE_PLAIN, strlen(TYPE_PLAIN));
    $$$$$:  148-block  0
        -:  149:	}
    #####:  150:}
        -:  151:
function server_static called 0 returned 0% blocks executed 0%
    #####:  152:static void server_static(int connfd, char *filename, int filesize, const char *method)
    $$$$$:  152-block  0
        -:  153:{
    #####:  154:	assert(filename);
    $$$$$:  154-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  154-block  1
call    2 never executed
    #####:  155:	assert(connfd > 0);
    $$$$$:  155-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  155-block  1
call    2 never executed
    #####:  156:	assert(filesize > 0);
    $$$$$:  156-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  156-block  1
call    2 never executed
        -:  157:
        -:  158:	int srcfd;
        -:  159:	char *srcp;
    #####:  160:	char filetype[MAXLINE] = { 0 };
    #####:  161:	char buf[MAXBUF] = { 0 };
        -:  162:
    #####:  163:	get_filetype(filename, filetype);
    $$$$$:  163-block  0
call    0 never executed
    #####:  164:	sprintf(buf, "HTTP/1.0 200 OK\r\n");
    #####:  165:	sprintf(buf, "%sServer: Tiny Web Server\r\n", buf);
    #####:  166:	sprintf(buf, "%sContent-length: %d\r\n", buf, filesize);
    #####:  167:	sprintf(buf, "%sContent-type: %s\r\n\r\n", buf, filetype);
        -:  168:		
        -:  169:	#ifdef HTTPS
    #####:  170:		SSL_write(ssl, buf, strlen(buf));
call    0 never executed
        -:  171:	#else 
        -:  172:		Rio_writen(connfd, buf, strlen(buf));
        -:  173:	#endif
        -:  174:
    #####:  175:	zlog_info(c, buf);
call    0 never executed
    #####:  176:	if (strcasecmp(method, "GET") == 0)
branch  0 never executed
branch  1 never executed
        -:  177:	{
    #####:  178:		srcfd = Open(filename, O_RDONLY, 0);
    $$$$$:  178-block  0
call    0 never executed
    #####:  179:		srcp = (char *)malloc((filesize + 1) * sizeof(char));
    #####:  180:		memset(srcp, 0, filesize + 1);
        -:  181:
    #####:  182:		Rio_readn(srcfd, srcp, filesize);
call    0 never executed
        -:  183:		
    #####:  184:		zlog_info(c, srcp);
call    0 never executed
        -:  185:		
        -:  186:		#ifdef HTTPS
    #####:  187:			SSL_write(ssl, srcp, filesize);
call    0 never executed
        -:  188:		#else 
        -:  189:			Rio_writen(connfd, srcp, filesize);
        -:  190:		#endif	
    #####:  191:		free(srcp);
    #####:  192:		srcp = NULL;
    #####:  193:		Close(srcfd);
call    0 never executed
        -:  194:	}
    #####:  195:	else if (strcasecmp(method, "HEAD") == 0)
    $$$$$:  195-block  0
        -:  196:	{
        -:  197:		//method == "HEAD"
        -:  198:		//只返回服务器信息，不返回实际内容信息
        -:  199:	}
    #####:  200:}
        -:  201:
function handler_sigchld called 0 returned 0% blocks executed 0%
    #####:  202:void handler_sigchld(int sig)
    $$$$$:  202-block  0
        -:  203:{
        -:  204:	pid_t pid;
        -:  205:	
    #####:  206:	while ((pid = waitpid(-1, NULL, 0)) > 0)
    $$$$$:  206-block  0
    $$$$$:  206-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  207:	{
        -:  208:		//log
        -:  209:	}
    #####:  210:	if (errno != ECHILD)
    $$$$$:  210-block  0
        -:  211:	{
        -:  212:		//log
        -:  213:	}
    #####:  214:	return;
    $$$$$:  214-block  0
        -:  215:}
        -:  216:
function handle_sigpipe called 0 returned 0% blocks executed 0%
    #####:  217:static void handle_sigpipe(int sig)
    $$$$$:  217-block  0
        -:  218:{
        -:  219:	//zlog_info(c, "..handle_sigpipe...%d", sig);
    #####:  220:	return;
    $$$$$:  220-block  0
        -:  221:}
        -:  222:
function get_dynamic called 0 returned 0% blocks executed 0%
    #####:  223:static void get_dynamic(int connfd, const char *filename, const char *cgiargs)
    $$$$$:  223-block  0
        -:  224:{
    #####:  225:	assert(filename && cgiargs);
    $$$$$:  225-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  225-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  225-block  2
call    4 never executed
    #####:  226:	assert(connfd >= 0);
    $$$$$:  226-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  226-block  1
call    2 never executed
        -:  227:
    #####:  228:	char buf[MAXLINE] = { 0 };
    #####:  229:	char *emptylist[] = { NULL };
        -:  230:	int pipe_in[2];
        -:  231:	int pipe_out[2];
        -:  232:	//处理子进程结束的信号，防止僵尸进程
    #####:  233:	Signal(SIGCHLD, handler_sigchld);
    $$$$$:  233-block  0
call    0 never executed
        -:  234:
    #####:  235:	sprintf(buf, "HTTP/1.0 200 OK\r\n");
        -:  236:#ifdef HTTPS
    #####:  237:	SSL_write(ssl, buf, strlen(buf));
call    0 never executed
        -:  238:#else
        -:  239:	Rio_writen(connfd, buf, strlen(buf));	
        -:  240:#endif	
    #####:  241:	zlog_info(c, buf);
call    0 never executed
    #####:  242:	sprintf(buf, "Server: Tiny Web Server\r\n");
        -:  243:#ifdef HTTPS
    #####:  244:	SSL_write(ssl, buf, strlen(buf));
call    0 never executed
        -:  245:#else
        -:  246:	Rio_writen(connfd, buf, strlen(buf));
        -:  247:#endif
    #####:  248:	zlog_info(c, buf);
call    0 never executed
    #####:  249:	pipe(pipe_in);
call    0 never executed
    #####:  250:	pipe(pipe_out);
call    0 never executed
    #####:  251:	if (Fork() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  252:	{	
    #####:  253:		dup2(pipe_out[1], 1);
    $$$$$:  253-block  0
call    0 never executed
    #####:  254:		close(pipe_out[0]);
call    0 never executed
    #####:  255:		setenv("QUERY_STRING", cgiargs, 1);
call    0 never executed
    #####:  256:		Execve(filename, emptylist, environ);	
call    0 never executed
        -:  257:	}
        -:  258:	else 
        -:  259:	{
        -:  260:		//dup2(pipe_out[0],0);
    #####:  261:		close(pipe_out[1]);
    $$$$$:  261-block  0
call    0 never executed
        -:  262:		char ch;
    #####:  263:		while(read(pipe_out[0], &ch, 1) > 0)
    $$$$$:  263-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  263-block  1
        -:  264:		{
        -:  265:		#ifdef HTTPS
    #####:  266:			SSL_write(ssl, &ch, 1);
    $$$$$:  266-block  0
call    0 never executed
        -:  267:		#else
        -:  268:			send(connfd, &ch, 1, 0);
        -:  269:		#endif
        -:  270:		}
        -:  271:	}
        -:  272:	
    #####:  273:}
        -:  274:
function post_dynamic called 0 returned 0% blocks executed 0%
    #####:  275:static void post_dynamic(int connfd, const char *filename, char *post_data, int content_length)
    $$$$$:  275-block  0
        -:  276:{
    #####:  277:	assert(filename && post_data);
    $$$$$:  277-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  277-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  277-block  2
call    4 never executed
    #####:  278:	assert(connfd > 0);
    $$$$$:  278-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  278-block  1
call    2 never executed
    #####:  279:	assert(content_length > 0);
    $$$$$:  279-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  279-block  1
call    2 never executed
        -:  280:
    #####:  281:	char buf[MAXLINE] = { 0 };
    #####:  282:	char *emptylist[] = { NULL };
        -:  283:	int pipe_in[2];
        -:  284:	int pipe_out[2];
    #####:  285:	char length_content[32] = { 0 };
        -:  286:	
    #####:  287:	sprintf(length_content, "%d", content_length);	
        -:  288:	//zlog_info(c, buf);
        -:  289:	//处理子进程结束的信号，防止僵尸进程
    #####:  290:	Signal(SIGCHLD, handler_sigchld);
    $$$$$:  290-block  0
call    0 never executed
        -:  291:
    #####:  292:	pipe(pipe_in);
call    0 never executed
    #####:  293:	pipe(pipe_out);
call    0 never executed
    #####:  294:	if (Fork() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  295:	{
    #####:  296:		dup2(pipe_out[1], 1);
    $$$$$:  296-block  0
call    0 never executed
    #####:  297:		dup2(pipe_in[0], 0);
call    0 never executed
    #####:  298:		close(pipe_out[0]);
call    0 never executed
    #####:  299:		close(pipe_in[1]);
call    0 never executed
        -:  300:
    #####:  301:		setenv("CONTENT-LENGTH", length_content, 1);
call    0 never executed
    #####:  302:		Execve(filename, emptylist, environ);
call    0 never executed
    #####:  303:		exit(0);
call    0 never executed
        -:  304:	}
        -:  305:	else 
        -:  306:	{
    #####:  307:		sprintf(buf, "HTTP/1.0 200 OK\r\n");
        -:  308:	#ifdef HTTPS
    #####:  309:		SSL_write(ssl, buf, strlen(buf));
    $$$$$:  309-block  0
call    0 never executed
        -:  310:	#else
        -:  311:		Rio_writen(connfd, buf, strlen(buf));	
        -:  312:	#endif
    #####:  313:		zlog_info(c, buf);
call    0 never executed
    #####:  314:		sprintf(buf, "Server: Tiny Web Server\r\n");
        -:  315:	#ifdef HTTPS
    #####:  316:		SSL_write(ssl, buf, strlen(buf));
call    0 never executed
        -:  317:	#else
        -:  318:		Rio_writen(connfd, buf, strlen(buf));
        -:  319:	#endif
    #####:  320:		zlog_info(c, buf);
call    0 never executed
        -:  321:
    #####:  322:		close(pipe_out[1]);
call    0 never executed
    #####:  323:		close(pipe_in[0]);
call    0 never executed
        -:  324:		//char c;
        -:  325:		//for (int i = 0; i < content_length; i++)
        -:  326:		//{
        -:  327:		//	recv(connfd, &c, 1, 0);
        -:  328:		//	write(pipe_in[1], &c, 1);
        -:  329:		//}
    #####:  330:		Rio_writen(pipe_in[1], post_data, content_length);
call    0 never executed
    #####:  331:		while (read(pipe_out[0], &c, 1) > 0)
    $$$$$:  331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  332:		{
        -:  333:		#ifdef HTTPS
    #####:  334:			SSL_write(ssl,&c,1);
    $$$$$:  334-block  0
call    0 never executed
        -:  335:		#else
        -:  336:			send(connfd, &c, 1, 0);
        -:  337:		#endif
        -:  338:		}
    #####:  339:		close(pipe_out[0]);
    $$$$$:  339-block  0
call    0 never executed
    #####:  340:		close(pipe_in[1]);
call    0 never executed
        -:  341:		
        -:  342:	}
        -:  343:#if 0	
        -:  344:	//! child
        -:  345:	if (Fork() == 0)
        -:  346:	{
        -:  347:		Close(pipe_in[0]);	
        -:  348:                //子进程写post数据到管道中，方便父进程读取
        -:  349:		zlog_info(c, post_data);	
        -:  350:		Rio_writen(pipe_in[1], post_data, content_length);
        -:  351:		zlog_info(c, "child end");
        -:  352:		exit(0);
        -:  353:	}
        -:  354:	//! parent	
        -:  355:	//else 
        -:  356:	//{
        -:  357:		
        -:  358:
        -:  359:		sprintf(buf, "HTTP/1.0 200 OK\r\n");
        -:  360:		zlog_info(c, buf);
        -:  361:		Rio_writen(connfd, buf, strlen(buf));	
        -:  362:		sprintf(buf, "Server: Tiny Web Server\r\n");
        -:  363:		zlog_info(c, buf);
        -:  364:		Rio_writen(connfd, buf, strlen(buf));	
        -:  365:		//父进程重定向标准输入到管道读端，后续从标准输入读，相当于在管道中读
        -:  366:		//父进程执行execve 的cgi时，在cgi中read标准输入，相当于从管道中读
        -:  367:		Dup2(pipe_in[0], STDIN_FILENO);
        -:  368:		Close(pipe_in[0]);
        -:  369:
        -:  370:		Close(pipe_in[1]);
        -:  371:		setenv("CONTENT-LENGTH", length_content, 1);
        -:  372:
        -:  373:		Dup2(connfd, STDOUT_FILENO);
        -:  374:		zlog_info(c, "execve start");
        -:  375:		Execve(filename, emptylist, environ);	
        -:  376:		zlog_info(c, "execve error");		
        -:  377:	//}
        -:  378:#endif
    #####:  379:}
        -:  380:
        -:  381:#if 0
        -:  382://! 废弃
        -:  383:static void server_dynamic(int connfd, char *filename, char *cgiargs, int content_length, const char *method)
        -:  384:{
        -:  385:	assert(filename && cgiargs && method);
        -:  386:	assert(connfd > 0);
        -:  387:	assert(content_length >= 0);
        -:  388:
        -:  389:	//处理子进程结束的信号，防止僵尸进程
        -:  390:	Signal(SIGCHLD, handler_sigchld);
        -:  391:
        -:  392:	//writelog(cgiargs);
        -:  393:	char buf[MAXLINE] = { 0 };
        -:  394:	char *emptylist[] = { NULL };
        -:  395:	char post_data[MAXLINE] = { 0 };
        -:  396:	int pipe_rw[2];
        -:  397:	char length_content[32] = { 0 };
        -:  398:
        -:  399:	if (strcmp(method, "GET") == 0)
        -:  400:	{
        -:  401:		sprintf(buf, "HTTP/1.0 200 OK\r\n");
        -:  402:		Rio_writen(connfd, buf, strlen(buf));
        -:  403:		//writelog(buf);
        -:  404:		sprintf(buf, "Server: Tiny Web Server\r\n");
        -:  405:		Rio_writen(connfd, buf, strlen(buf));
        -:  406:		//writelog(buf);
        -:  407:		if (Fork() == 0)
        -:  408:		{
        -:  409:			setenv("QUERY_STRING", cgiargs, 1);
        -:  410:			Dup2(connfd, STDOUT_FILENO);
        -:  411:			//writelog(filename);
        -:  412:			Execve(filename, emptylist, environ);	
        -:  413:		}
        -:  414:	}
        -:  415:	else if (strcmp(method, "POST") == 0)
        -:  416:	{
        -:  417:		writelog("[post temp not impl]\n");
        -:  418:		sprintf(length_content, "%d", content_length);
        -:  419:
        -:  420:		pipe(pipe_rw);
        -:  421:		//! child
        -:  422:		if (Fork() == 0)
        -:  423:		{
        -:  424:			Close(pipe_rw[0]);
        -:  425:			
        -:  426:			Rio_writen(pipe_rw[1], post_data, content_length);
        -:  427:			exit(0);
        -:  428:		}
        -:  429:		//! parent	
        -:  430:		else 
        -:  431:		{
        -:  432:			sprintf(buf, "HTTP/1.0 200 OK\r\n");
        -:  433:			Rio_writen(connfd, buf, strlen(buf));	
        -:  434:			sprintf(buf, "Server: Tiny Web Server\r\n");
        -:  435:			Rio_writen(connfd, buf, strlen(buf));	
        -:  436:			
        -:  437:			Dup2(pipe_rw[0], STDIN_FILENO);
        -:  438:			Close(pipe_rw[0]);
        -:  439:
        -:  440:			Close(pipe_rw[1]);
        -:  441:			setenv("CONTENT-LENGTH", length_content, 1);
        -:  442:
        -:  443:			Dup2(connfd, STDOUT_FILENO);
        -:  444:			Execve(filename, emptylist, environ);			
        -:  445:		}	
        -:  446:	}
        -:  447:	else
        -:  448:	{
        -:  449:
        -:  450:	}
        -:  451:}
        -:  452:#endif
        -:  453:
function clienterr called 0 returned 0% blocks executed 0%
    #####:  454:static void clienterr(int fd, char *cause, char *errnum, char *shortmsg, char *longmsg)
    $$$$$:  454-block  0
        -:  455:{
        -:  456:
    #####:  457:	assert(cause && errnum && shortmsg && longmsg);
    $$$$$:  457-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  457-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  457-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  457-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  457-block  4
call    8 never executed
    #####:  458:	assert(fd > 0);
    $$$$$:  458-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  458-block  1
call    2 never executed
        -:  459:
    #####:  460:	char header[MAXLINE] = { 0 };
    #####:  461:	char body[MAXBUF] = { 0 };
        -:  462:
    #####:  463:	sprintf(body, "<html><title>Tiny Error</title>");
    #####:  464:	sprintf(body, "%s<body bgcolor=""ffffff"">\r\n", body);
    #####:  465:	sprintf(body, "%s%s: %s\r\n", body, errnum, shortmsg);
    #####:  466:	sprintf(body, "%s<p>%s: %s\r\n", body, longmsg, cause);
    #####:  467:	sprintf(body, "%s<hr><em>The Tiny Web Server</em>\r\n", body);
        -:  468:	
    #####:  469:	sprintf(header, "HTTP/1.0 %s %s\r\n", errnum, shortmsg);
        -:  470:	//zlog_info(c, header);
        -:  471:	//Rio_writen(fd, header, strlen(header));
    #####:  472:	sprintf(header, "%s Content-type: text/html\r\n", header);
        -:  473:	//zlog_info(c, header);
        -:  474:	//zlog_info(c, "%d", fd);
        -:  475:	//Rio_writen(fd, header, strlen(header));
    #####:  476:	sprintf(header, "%s Content-length: %d\r\n\r\n",header, (int)strlen(body));
        -:  477:	//zlog_info(c, header);
        -:  478:#ifdef HTTPS
    #####:  479:	SSL_write(ssl, header, strlen(header));
    $$$$$:  479-block  0
call    0 never executed
    #####:  480:	SSL_write(ssl, body, strlen(body));
call    0 never executed
        -:  481:#else
        -:  482:	Rio_writen(fd, header,strlen(header));
        -:  483:	//zlog_info(c, body);
        -:  484:	Rio_writen(fd, body, strlen(body));
        -:  485:#endif
    #####:  486:}
        -:  487:
        -:  488:const char *support_method[] = {"GET","POST","HEAD"};
        -:  489:
function is_support_method called 0 returned 0% blocks executed 0%
    #####:  490:static bool is_support_method(const char *method)
    $$$$$:  490-block  0
        -:  491:{
    #####:  492:	assert(method);
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
call    2 never executed
    #####:  493:	bool is_support = false;
    #####:  494:	int i = 0;
    #####:  495:	int len = sizeof(support_method) / sizeof(support_method[0]);
    #####:  496:	for (i = 0; i < len; i++)
    $$$$$:  496-block  0
    $$$$$:  496-block  1
    $$$$$:  496-block  2
branch  0 never executed
branch  1 never executed
        -:  497:	{
    #####:  498:		if (strcmp(support_method[i], method) == 0)
    $$$$$:  498-block  0
branch  0 never executed
branch  1 never executed
        -:  499:		{
    #####:  500:			is_support = true;
    $$$$$:  500-block  0
        -:  501:		}
        -:  502:	}
    #####:  503:	return is_support;
    $$$$$:  503-block  0
        -:  504:}
        -:  505:
function doit called 0 returned 0% blocks executed 0%
    #####:  506:void doit(int connfd)
    $$$$$:  506-block  0
        -:  507:{
    #####:  508:	assert(connfd > 0);
    $$$$$:  508-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  508-block  1
call    2 never executed
        -:  509:
        -:  510:	int is_static;
        -:  511:	struct stat sbuf;
    #####:  512:	char buf[MAXLINE] = { 0 };
    #####:  513:	char method[MAXLINE] = { 0 };
    #####:  514:	char uri[MAXLINE] = { 0 };
    #####:  515:	char version[MAXLINE] = { 0 };
    #####:  516:	char filename[MAXLINE] = { 0 };
    #####:  517:	char cgiargs[MAXLINE] = { 0 };
        -:  518:	rio_t rio;
    #####:  519:	memset(&rio, 0, sizeof(rio_t));
    #####:  520:	int content_length = 0;
    #####:  521:	Signal(SIGPIPE, handle_sigpipe);
    $$$$$:  521-block  0
call    0 never executed
        -:  522:
        -:  523:#ifdef HTTPS
    #####:  524:	ssl = SSL_new(g_ctx);
call    0 never executed
    #####:  525:	SSL_set_fd(ssl,connfd);
call    0 never executed
    #####:  526:	if (SSL_accept(ssl) == -1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  527:	{
    #####:  528:		perror("ssl accept");
    $$$$$:  528-block  0
call    0 never executed
    #####:  529:		return;
        -:  530:	}
        -:  531:
    #####:  532:	SSL_read(ssl, buf, MAXBUF);
    $$$$$:  532-block  0
call    0 never executed
        -:  533:#else 
        -:  534:	Rio_readinitb(&rio, connfd);
        -:  535:	Rio_readlineb(&rio, buf, MAXLINE);
        -:  536:#endif
        -:  537:	//包中读出的内容至少需要有方法，方法名最短的长度是3 GET
    #####:  538:	if (strlen(buf) <= 3)
branch  0 never executed
branch  1 never executed
        -:  539:	{
    #####:  540:		zlog_info(c, "doit no content");
    $$$$$:  540-block  0
call    0 never executed
    #####:  541:		goto finish;
        -:  542:	}
        -:  543:
        -:  544:	/* GET / HTTP/1.1 */
    #####:  545:	zlog_info(c, buf);
    $$$$$:  545-block  0
call    0 never executed
    #####:  546:	sscanf(buf, "%s %s %s", method, uri, version);
    #####:  547:	if (!is_support_method(method))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  548:	{
    #####:  549:		clienterr(connfd, method, "501", "Not Implemented", "Tiny does not implement this method.");
    $$$$$:  549-block  0
call    0 never executed
    #####:  550:		return;
        -:  551:	}
        -:  552:
        -:  553:	//read_requesthdrs(&rio);
        -:  554:	
        -:  555:
    #####:  556:	is_static = parse_uri(uri, filename, cgiargs);
    $$$$$:  556-block  0
call    0 never executed
    #####:  557:	if (stat(filename, &sbuf) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  558:	{
    #####:  559:		clienterr(connfd, filename, "404", "Not Found", "Tiny could not find this file");
    $$$$$:  559-block  0
call    0 never executed
    #####:  560:		return;
        -:  561:	}
        -:  562:
    #####:  563:	if (is_static)
    $$$$$:  563-block  0
branch  0 never executed
branch  1 never executed
        -:  564:	{
    #####:  565:		if (!(S_ISREG(sbuf.st_mode)) || !(S_IRUSR & sbuf.st_mode))
    $$$$$:  565-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  565-block  1
branch  2 never executed
branch  3 never executed
        -:  566:		{
    #####:  567:			clienterr(connfd, filename, "403", "Forbidden", "Tiny could not read the file");
    $$$$$:  567-block  0
call    0 never executed
    #####:  568:			return;
        -:  569:		}
    #####:  570:		server_static(connfd, filename, sbuf.st_size, method);
    $$$$$:  570-block  0
call    0 never executed
        -:  571:	}
        -:  572:	else 
        -:  573:	{
    #####:  574:		if (!(S_ISREG(sbuf.st_mode)) || !(S_IXUSR & sbuf.st_mode))
    $$$$$:  574-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  574-block  1
branch  2 never executed
branch  3 never executed
        -:  575:		{
    #####:  576:			clienterr(connfd, filename, "403", "Forbidden", "Tiny could not run the CGI program");
    $$$$$:  576-block  0
call    0 never executed
    #####:  577:			return;
        -:  578:		}
        -:  579:
        -:  580:		//server_dynamic(connfd, filename, cgiargs, content_length, method);
    #####:  581:		if (strcmp(method, "GET") == 0)
    $$$$$:  581-block  0
branch  0 never executed
branch  1 never executed
        -:  582:		{
    #####:  583:			get_dynamic(connfd, filename, cgiargs);
    $$$$$:  583-block  0
call    0 never executed
        -:  584:		}
    #####:  585:		else if (strcmp(method, "POST") == 0)
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
        -:  586:		{
        -:  587:		#ifdef HTTPS
    #####:  588:			post_https_requesthdrs(buf, &content_length, cgiargs);
    $$$$$:  588-block  0
call    0 never executed
        -:  589:		#else
        -:  590:			post_requesthdrs(&rio, &content_length);
        -:  591:			//Rio_readlineb函数底层实现i=1，不是从０开始,因此长度需要加１
        -:  592:			Rio_readlineb(&rio, cgiargs, content_length + 1);
        -:  593:		#endif
    #####:  594:			post_dynamic(connfd, filename, cgiargs, content_length);
call    0 never executed
        -:  595:		}
        -:  596:		else 
        -:  597:		{
    #####:  598:			zlog_error(c,"fatal error");
    $$$$$:  598-block  0
call    0 never executed
        -:  599:		}
        -:  600:		
        -:  601:	}
    #####:  602:finish:
        -:  603:#ifdef HTTPS
    #####:  604:	SSL_shutdown(ssl);
    $$$$$:  604-block  0
call    0 never executed
    #####:  605:	SSL_free(ssl);
call    0 never executed
        -:  606:#endif
    #####:  607:	return;
    $$$$$:  607-block  0
        -:  608:}
        -:  609:
